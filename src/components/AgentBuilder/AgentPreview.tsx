import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import ChatInterface from "@/components/Chat/ChatInterface";
import {
  MessageCircle,
  Code,
  Bug,
  Settings,
  RefreshCw,
  Send,
  Maximize2,
  Minimize2,
} from "lucide-react";

interface Message {
  id: string;
  role: "user" | "assistant" | "system";
  content: string;
  timestamp: Date;
}

interface AgentPreviewProps {
  agentName?: string;
  agentDescription?: string;
  uiType?: "chat" | "popup" | "sidebar";
  primaryColor?: string;
  messages?: Message[];
  isLoading?: boolean;
}

const AgentPreview = ({
  agentName = "Test Agent",
  agentDescription = "This is a test agent to demonstrate the preview functionality",
  uiType = "chat",
  primaryColor = "#3b82f6",
  messages: initialMessages = [
    {
      id: "1",
      role: "system",
      content: "I am an AI assistant created to help you with your tasks.",
      timestamp: new Date(Date.now() - 1000 * 60 * 5),
    },
    {
      id: "2",
      role: "assistant",
      content: "Hello! I'm your AI assistant. How can I help you today?",
      timestamp: new Date(Date.now() - 1000 * 60 * 2),
    },
  ],
  isLoading = false,
}: AgentPreviewProps) => {
  const [messages, setMessages] = useState<Message[]>(initialMessages);
  const [inputValue, setInputValue] = useState("");
  const [activeTab, setActiveTab] = useState("chat");
  const [isExpanded, setIsExpanded] = useState(false);

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: inputValue,
      timestamp: new Date(),
    };

    setMessages([...messages, userMessage]);
    setInputValue("");

    // Simulate assistant response after a delay
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: `This is a simulated response to: "${inputValue}". In a real implementation, this would be generated by the AI model.`,
        timestamp: new Date(),
      };

      setMessages((prevMessages) => [...prevMessages, assistantMessage]);
    }, 1000);
  };

  const renderChatUI = () => (
    <div className="flex flex-col h-full bg-background">
      <div className="flex items-center justify-between p-3 border-b">
        <div className="flex items-center gap-2">
          <Avatar>
            <AvatarImage src="https://api.dicebear.com/7.x/bottts/svg?seed=agent" />
            <AvatarFallback>AI</AvatarFallback>
          </Avatar>
          <div>
            <h3 className="font-medium">{agentName}</h3>
            <p className="text-xs text-muted-foreground">{agentDescription}</p>
          </div>
        </div>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => setIsExpanded(!isExpanded)}
        >
          {isExpanded ? (
            <Minimize2 className="h-4 w-4" />
          ) : (
            <Maximize2 className="h-4 w-4" />
          )}
        </Button>
      </div>

      <ScrollArea className="flex-1 p-4">
        <div className="flex flex-col gap-4">
          {messages
            .filter((m) => m.role !== "system")
            .map((message) => (
              <div
                key={message.id}
                className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
              >
                <div
                  className={`max-w-[80%] rounded-lg p-3 ${
                    message.role === "user"
                      ? "bg-primary text-primary-foreground"
                      : "bg-muted"
                  }`}
                >
                  <p className="text-sm">{message.content}</p>
                  <p className="text-xs opacity-70 mt-1">
                    {message.timestamp.toLocaleTimeString([], {
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </p>
                </div>
              </div>
            ))}
          {isLoading && (
            <div className="flex justify-start">
              <div className="max-w-[80%] rounded-lg p-3 bg-muted">
                <div className="flex gap-1">
                  <div className="w-2 h-2 rounded-full bg-muted-foreground animate-bounce" />
                  <div
                    className="w-2 h-2 rounded-full bg-muted-foreground animate-bounce"
                    style={{ animationDelay: "0.2s" }}
                  />
                  <div
                    className="w-2 h-2 rounded-full bg-muted-foreground animate-bounce"
                    style={{ animationDelay: "0.4s" }}
                  />
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      <div className="p-3 border-t">
        <form
          className="flex gap-2"
          onSubmit={(e) => {
            e.preventDefault();
            handleSendMessage();
          }}
        >
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="Type your message..."
            className="flex-1"
          />
          <Button type="submit" size="icon">
            <Send className="h-4 w-4" />
          </Button>
        </form>
      </div>
    </div>
  );

  const renderDebugUI = () => (
    <div className="p-4 h-full overflow-auto bg-background">
      <h3 className="text-lg font-medium mb-4">Debug Information</h3>

      <div className="mb-4">
        <h4 className="text-sm font-medium mb-2">Agent Configuration</h4>
        <pre className="bg-muted p-3 rounded-md text-xs overflow-auto">
          {JSON.stringify(
            {
              name: agentName,
              description: agentDescription,
              uiType: uiType,
              primaryColor: primaryColor,
              messageCount: messages.length,
            },
            null,
            2,
          )}
        </pre>
      </div>

      <div className="mb-4">
        <h4 className="text-sm font-medium mb-2">Message History</h4>
        <pre className="bg-muted p-3 rounded-md text-xs overflow-auto">
          {JSON.stringify(messages, null, 2)}
        </pre>
      </div>

      <div className="mb-4">
        <h4 className="text-sm font-medium mb-2">Actions</h4>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setMessages(initialMessages)}
          >
            <RefreshCw className="h-3 w-3 mr-1" /> Reset Chat
          </Button>
          <Button variant="outline" size="sm">
            <Bug className="h-3 w-3 mr-1" /> Toggle Debug Mode
          </Button>
        </div>
      </div>
    </div>
  );

  return (
    <Card className="w-full h-full bg-background">
      <CardContent className="p-0 h-full">
        <div className="flex flex-col h-full">
          <Tabs
            value={activeTab}
            onValueChange={setActiveTab}
            className="flex flex-col h-full"
          >
            <div className="border-b px-2">
              <TabsList className="bg-transparent">
                <TabsTrigger
                  value="chat"
                  className="data-[state=active]:bg-transparent"
                >
                  <MessageCircle className="h-4 w-4 mr-1" /> Chat
                </TabsTrigger>
                <TabsTrigger
                  value="debug"
                  className="data-[state=active]:bg-transparent"
                >
                  <Code className="h-4 w-4 mr-1" /> Debug
                </TabsTrigger>
                <TabsTrigger
                  value="settings"
                  className="data-[state=active]:bg-transparent"
                >
                  <Settings className="h-4 w-4 mr-1" /> Settings
                </TabsTrigger>
              </TabsList>
            </div>

            <div className="flex-1 overflow-hidden">
              <TabsContent
                value="chat"
                className="h-full m-0 p-0 data-[state=active]:flex-1"
              >
                <ChatInterface
                  agentConfig={{
                    name: agentName,
                    description: agentDescription,
                    systemPrompt:
                      "You are a helpful AI assistant. Be concise and accurate in your responses.",
                    tools: ["search"], // Default tools for preview
                  }}
                />
              </TabsContent>

              <TabsContent
                value="debug"
                className="h-full m-0 data-[state=active]:flex-1"
              >
                {renderDebugUI()}
              </TabsContent>

              <TabsContent
                value="settings"
                className="h-full m-0 p-4 data-[state=active]:flex-1"
              >
                <h3 className="text-lg font-medium mb-4">Agent Settings</h3>

                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-medium mb-2">UI Type</h4>
                    <div className="flex gap-2">
                      <Badge
                        variant={uiType === "chat" ? "default" : "outline"}
                      >
                        Chat
                      </Badge>
                      <Badge
                        variant={uiType === "popup" ? "default" : "outline"}
                      >
                        Popup
                      </Badge>
                      <Badge
                        variant={uiType === "sidebar" ? "default" : "outline"}
                      >
                        Sidebar
                      </Badge>
                    </div>
                  </div>

                  <div>
                    <h4 className="text-sm font-medium mb-2">Primary Color</h4>
                    <div
                      className="w-8 h-8 rounded-full border"
                      style={{ backgroundColor: primaryColor }}
                    />
                  </div>

                  <Separator />

                  <div>
                    <h4 className="text-sm font-medium mb-2">
                      Preview Controls
                    </h4>
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setMessages(initialMessages)}
                      >
                        Reset Chat
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setIsLoading(!isLoading)}
                      >
                        Toggle Loading
                      </Button>
                    </div>
                  </div>
                </div>
              </TabsContent>
            </div>
          </Tabs>
        </div>
      </CardContent>
    </Card>
  );
};

export default AgentPreview;
