import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import ChatInterface from "@/components/Chat/ChatInterface";
import {
  MessageCircle,
  Code,
  Bug,
  Settings,
  RefreshCw,
  Send,
  Maximize2,
  Minimize2,
  Bot,
  User,
  Play,
  Pause,
  RotateCcw,
} from "lucide-react";

interface Message {
  id: string;
  role: "user" | "assistant" | "system";
  content: string;
  timestamp: Date;
}

interface AgentPreviewProps {
  agentName?: string;
  agentDescription?: string;
  uiType?: "chat" | "popup" | "sidebar";
  primaryColor?: string;
  messages?: Message[];
  isLoading?: boolean;
  systemPrompt?: string;
  tools?: string[];
}

const AgentPreview = ({
  agentName = "AI Assistant",
  agentDescription = "A helpful AI assistant for testing and demonstration",
  uiType = "chat",
  primaryColor = "#3b82f6",
  messages: initialMessages = [
    {
      id: "1",
      role: "assistant",
      content: `Hello! I'm ${agentName}. ${agentDescription} How can I help you today?`,
      timestamp: new Date(Date.now() - 1000 * 60 * 2),
    },
  ],
  isLoading = false,
  systemPrompt = "You are a helpful AI assistant. Be concise and accurate in your responses.",
  tools = ["search"],
}: AgentPreviewProps) => {
  const [messages, setMessages] = useState<Message[]>(initialMessages);
  const [inputValue, setInputValue] = useState("");
  const [activeTab, setActiveTab] = useState("chat");
  const [isExpanded, setIsExpanded] = useState(false);
  const [isSimulating, setIsSimulating] = useState(false);
  const [previewLoading, setPreviewLoading] = useState(false);

  const handleSendMessage = () => {
    if (!inputValue.trim() || previewLoading) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: inputValue,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputValue("");
    setPreviewLoading(true);

    // Simulate assistant response after a delay
    setTimeout(() => {
      const responses = [
        "I understand your request. Let me help you with that.",
        "That's an interesting question! Here's what I think...",
        "I can definitely assist you with this task.",
        "Based on your input, I would recommend the following approach...",
        "Let me analyze this for you and provide a comprehensive response.",
      ];

      const randomResponse =
        responses[Math.floor(Math.random() * responses.length)];

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: `${randomResponse} This is a simulated response to demonstrate the agent's behavior. In a real implementation, this would be generated by the AI model based on your configuration.`,
        timestamp: new Date(),
      };

      setMessages((prev) => [...prev, assistantMessage]);
      setPreviewLoading(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const resetChat = () => {
    setMessages(initialMessages);
    setInputValue("");
    setPreviewLoading(false);
  };

  const simulateConversation = () => {
    if (isSimulating) return;

    setIsSimulating(true);
    const demoMessages = [
      { role: "user" as const, content: "Hello, can you help me with a task?" },
      {
        role: "assistant" as const,
        content:
          "Of course! I'd be happy to help you. What task would you like assistance with?",
      },
      { role: "user" as const, content: "I need to organize my project files" },
      {
        role: "assistant" as const,
        content:
          "I can help you organize your project files. Here are some suggestions:\n\n1. Create folders by project type\n2. Use consistent naming conventions\n3. Archive old projects\n4. Keep active projects easily accessible\n\nWould you like me to elaborate on any of these points?",
      },
    ];

    let messageIndex = 0;
    const addNextMessage = () => {
      if (messageIndex < demoMessages.length) {
        const message: Message = {
          id: `demo-${Date.now()}-${messageIndex}`,
          role: demoMessages[messageIndex].role,
          content: demoMessages[messageIndex].content,
          timestamp: new Date(),
        };

        setMessages((prev) => [...prev, message]);
        messageIndex++;

        setTimeout(addNextMessage, 2000);
      } else {
        setIsSimulating(false);
      }
    };

    addNextMessage();
  };

  const renderChatPreview = () => (
    <div className="flex flex-col h-full bg-background">
      <div className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center gap-3">
          <Avatar>
            <AvatarImage src="https://api.dicebear.com/7.x/bottts/svg?seed=agent" />
            <AvatarFallback>
              <Bot className="h-4 w-4" />
            </AvatarFallback>
          </Avatar>
          <div>
            <h3 className="font-semibold">{agentName}</h3>
            <p className="text-sm text-muted-foreground">{agentDescription}</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          {tools && tools.length > 0 && (
            <div className="flex gap-1">
              {tools.map((tool) => (
                <Badge key={tool} variant="secondary" className="text-xs">
                  {tool}
                </Badge>
              ))}
            </div>
          )}
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? (
              <Minimize2 className="h-4 w-4" />
            ) : (
              <Maximize2 className="h-4 w-4" />
            )}
          </Button>
        </div>
      </div>

      <ScrollArea className="flex-1 p-4">
        <div className="flex flex-col gap-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}
            >
              {message.role === "assistant" && (
                <Avatar className="h-8 w-8">
                  <AvatarFallback>
                    <Bot className="h-4 w-4" />
                  </AvatarFallback>
                </Avatar>
              )}

              <div
                className={`max-w-[80%] rounded-lg px-3 py-2 ${
                  message.role === "user"
                    ? "bg-primary text-primary-foreground ml-auto"
                    : "bg-muted"
                }`}
              >
                <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                <p className="text-xs opacity-70 mt-1">
                  {message.timestamp.toLocaleTimeString([], {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </p>
              </div>

              {message.role === "user" && (
                <Avatar className="h-8 w-8">
                  <AvatarFallback>
                    <User className="h-4 w-4" />
                  </AvatarFallback>
                </Avatar>
              )}
            </div>
          ))}

          {previewLoading && (
            <div className="flex gap-3 justify-start">
              <Avatar className="h-8 w-8">
                <AvatarFallback>
                  <Bot className="h-4 w-4" />
                </AvatarFallback>
              </Avatar>
              <div className="bg-muted rounded-lg px-3 py-2">
                <div className="flex items-center gap-2">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 rounded-full bg-muted-foreground animate-bounce" />
                    <div
                      className="w-2 h-2 rounded-full bg-muted-foreground animate-bounce"
                      style={{ animationDelay: "0.2s" }}
                    />
                    <div
                      className="w-2 h-2 rounded-full bg-muted-foreground animate-bounce"
                      style={{ animationDelay: "0.4s" }}
                    />
                  </div>
                  <span className="text-sm text-muted-foreground">
                    Thinking...
                  </span>
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      <div className="p-4 border-t">
        <form
          className="flex gap-2"
          onSubmit={(e) => {
            e.preventDefault();
            handleSendMessage();
          }}
        >
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Type your message..."
            className="flex-1"
            disabled={previewLoading}
          />
          <Button
            type="submit"
            size="icon"
            disabled={previewLoading || !inputValue.trim()}
          >
            <Send className="h-4 w-4" />
          </Button>
        </form>
      </div>
    </div>
  );

  const renderDebugInfo = () => (
    <div className="p-4 h-full overflow-auto bg-background">
      <div className="space-y-6">
        <div>
          <h3 className="text-lg font-semibold mb-4">Debug Information</h3>
          <div className="grid gap-4">
            <div>
              <h4 className="text-sm font-medium mb-2">Agent Configuration</h4>
              <div className="bg-muted p-3 rounded-md">
                <pre className="text-xs overflow-auto">
                  {JSON.stringify(
                    {
                      name: agentName,
                      description: agentDescription,
                      uiType: uiType,
                      primaryColor: primaryColor,
                      systemPrompt: systemPrompt,
                      tools: tools,
                      messageCount: messages.length,
                    },
                    null,
                    2,
                  )}
                </pre>
              </div>
            </div>

            <div>
              <h4 className="text-sm font-medium mb-2">Message History</h4>
              <div className="bg-muted p-3 rounded-md max-h-64 overflow-auto">
                <pre className="text-xs">
                  {JSON.stringify(messages, null, 2)}
                </pre>
              </div>
            </div>

            <div>
              <h4 className="text-sm font-medium mb-2">State Information</h4>
              <div className="bg-muted p-3 rounded-md">
                <pre className="text-xs">
                  {JSON.stringify(
                    {
                      isLoading: previewLoading,
                      isSimulating: isSimulating,
                      isExpanded: isExpanded,
                      activeTab: activeTab,
                      inputValue: inputValue,
                    },
                    null,
                    2,
                  )}
                </pre>
              </div>
            </div>
          </div>
        </div>

        <div>
          <h4 className="text-sm font-medium mb-2">Debug Actions</h4>
          <div className="flex flex-wrap gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={resetChat}
              disabled={isSimulating}
            >
              <RotateCcw className="h-3 w-3 mr-1" /> Reset Chat
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={simulateConversation}
              disabled={isSimulating}
            >
              {isSimulating ? (
                <Pause className="h-3 w-3 mr-1" />
              ) : (
                <Play className="h-3 w-3 mr-1" />
              )}
              {isSimulating ? "Simulating..." : "Simulate Chat"}
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setPreviewLoading(!previewLoading)}
            >
              <Bug className="h-3 w-3 mr-1" /> Toggle Loading
            </Button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderSettings = () => (
    <div className="p-4 h-full overflow-auto bg-background">
      <div className="space-y-6">
        <div>
          <h3 className="text-lg font-semibold mb-4">Preview Settings</h3>
        </div>

        <div>
          <h4 className="text-sm font-medium mb-3">UI Type</h4>
          <div className="flex gap-2">
            <Badge variant={uiType === "chat" ? "default" : "outline"}>
              Chat Interface
            </Badge>
            <Badge variant={uiType === "popup" ? "default" : "outline"}>
              Popup Modal
            </Badge>
            <Badge variant={uiType === "sidebar" ? "default" : "outline"}>
              Sidebar Panel
            </Badge>
          </div>
        </div>

        <div>
          <h4 className="text-sm font-medium mb-3">Theme Configuration</h4>
          <div className="space-y-3">
            <div className="flex items-center gap-3">
              <span className="text-sm">Primary Color:</span>
              <div
                className="w-6 h-6 rounded-full border-2 border-border"
                style={{ backgroundColor: primaryColor }}
              />
              <code className="text-xs bg-muted px-2 py-1 rounded">
                {primaryColor}
              </code>
            </div>
          </div>
        </div>

        <div>
          <h4 className="text-sm font-medium mb-3">Available Tools</h4>
          <div className="flex flex-wrap gap-2">
            {tools && tools.length > 0 ? (
              tools.map((tool) => (
                <Badge key={tool} variant="secondary">
                  {tool}
                </Badge>
              ))
            ) : (
              <span className="text-sm text-muted-foreground">
                No tools configured
              </span>
            )}
          </div>
        </div>

        <Separator />

        <div>
          <h4 className="text-sm font-medium mb-3">Preview Controls</h4>
          <div className="flex flex-wrap gap-2">
            <Button variant="outline" size="sm" onClick={resetChat}>
              <RotateCcw className="h-3 w-3 mr-1" />
              Reset Chat
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={simulateConversation}
              disabled={isSimulating}
            >
              {isSimulating ? (
                <Pause className="h-3 w-3 mr-1" />
              ) : (
                <Play className="h-3 w-3 mr-1" />
              )}
              {isSimulating ? "Simulating..." : "Demo Conversation"}
            </Button>
          </div>
        </div>

        <div>
          <h4 className="text-sm font-medium mb-3">Integration Info</h4>
          <div className="bg-muted p-3 rounded-md">
            <p className="text-xs text-muted-foreground mb-2">
              This preview shows how your agent will behave when integrated into
              your application. The actual implementation will use real AI
              models and your configured settings.
            </p>
            <div className="flex gap-2 mt-3">
              <Badge variant="outline" className="text-xs">
                React Component
              </Badge>
              <Badge variant="outline" className="text-xs">
                CopilotKit Integration
              </Badge>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <Card className="w-full h-full bg-background">
      <CardContent className="p-0 h-full">
        <div className="flex flex-col h-full">
          <Tabs
            value={activeTab}
            onValueChange={setActiveTab}
            className="flex flex-col h-full"
          >
            <div className="border-b px-2">
              <TabsList className="bg-transparent">
                <TabsTrigger
                  value="chat"
                  className="data-[state=active]:bg-muted"
                >
                  <MessageCircle className="h-4 w-4 mr-2" />
                  Chat Preview
                </TabsTrigger>
                <TabsTrigger
                  value="debug"
                  className="data-[state=active]:bg-muted"
                >
                  <Code className="h-4 w-4 mr-2" />
                  Debug
                </TabsTrigger>
                <TabsTrigger
                  value="settings"
                  className="data-[state=active]:bg-muted"
                >
                  <Settings className="h-4 w-4 mr-2" />
                  Settings
                </TabsTrigger>
              </TabsList>
            </div>

            <div className="flex-1 overflow-hidden">
              <TabsContent
                value="chat"
                className="h-full m-0 p-0 data-[state=active]:flex data-[state=active]:flex-col"
              >
                {renderChatPreview()}
              </TabsContent>

              <TabsContent
                value="debug"
                className="h-full m-0 data-[state=active]:flex data-[state=active]:flex-col"
              >
                {renderDebugInfo()}
              </TabsContent>

              <TabsContent
                value="settings"
                className="h-full m-0 data-[state=active]:flex data-[state=active]:flex-col"
              >
                {renderSettings()}
              </TabsContent>
            </div>
          </Tabs>
        </div>
      </CardContent>
    </Card>
  );
};

export default AgentPreview;
